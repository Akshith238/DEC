//location services
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="16dp"
    tools:context=".MainActivity">

    <Button
        android:id="@+id/getLocationButton"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="GET LOCATION"
        android:layout_centerInParent="true"/>

</RelativeLayout>
package com.example.locationdemo

import android.Manifest
import android.content.pm.PackageManager
import android.os.Bundle
import android.widget.Button
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.google.android.gms.location.FusedLocationProviderClient
import com.google.android.gms.location.LocationServices

class MainActivity : AppCompatActivity() {

    private lateinit var fusedLocationClient: FusedLocationProviderClient

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)

        val getLocationButton: Button = findViewById(R.id.getLocationButton)

        getLocationButton.setOnClickListener {
            if (ContextCompat.checkSelfPermission(
                    this,
                    Manifest.permission.ACCESS_FINE_LOCATION
                ) != PackageManager.PERMISSION_GRANTED
            ) {
                // Permission is not granted
                ActivityCompat.requestPermissions(
                    this,
                    arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),
                    REQUEST_LOCATION_PERMISSION
                )
            } else {
                // Permission has already been granted
                fetchLocation()
            }
        }
    }

    private fun fetchLocation() {
        fusedLocationClient.lastLocation
            .addOnSuccessListener { location ->
                if (location != null) {
                    val latitude = location.latitude
                    val longitude = location.longitude
                    val message = "Latitude: $latitude, Longitude: $longitude"
                    showToast(message)
                } else {
                    showToast("Location not available")
                }
            }
            .addOnFailureListener { e ->
                showToast("Failed to fetch location: ${e.message}")
            }
    }

    private fun showToast(message: String) {
        Toast.makeText(this, message, Toast.LENGTH_LONG).show()
    }

    companion object {
        private const val REQUEST_LOCATION_PERMISSION = 1
    }
}

//notification

package com.example.notificationdemo

import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.os.Build
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.widget.Button
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat

class MainActivity : AppCompatActivity() {

    private val CHANNEL_ID = "My_Channel_ID"
    private val NOTIFICATION_ID = 101

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        createNotificationChannel()

        val button = findViewById<Button>(R.id.showNotificationButton)
        button.setOnClickListener {
            val intent = Intent(this, SecondActivity::class.java)
            val pendingIntent = PendingIntent.getActivity(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT)

            val builder = NotificationCompat.Builder(this, CHANNEL_ID)
                .setSmallIcon(R.drawable.ic_notification)
                .setContentTitle("Notification Title")
                .setContentText("Click to open SecondActivity")
                .setPriority(NotificationCompat.PRIORITY_DEFAULT)
                .setContentIntent(pendingIntent)
                .setAutoCancel(true)

            with(NotificationManagerCompat.from(this)) {
                notify(NOTIFICATION_ID, builder.build())
            }
        }
    }

    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val name = getString(R.string.channel_name)
            val descriptionText = getString(R.string.channel_description)
            val importance = NotificationManager.IMPORTANCE_DEFAULT
            val channel = NotificationChannel(CHANNEL_ID, name, importance).apply {
                description = descriptionText
            }

            val notificationManager: NotificationManager =
                getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            notificationManager.createNotificationChannel(channel)
        }
    }
}
Add a layout file for SecondActivity named activity_second.xml if it doesnt exist and design it according to your requirements.
Make sure you have an icon named ic_notification.png in the res/drawable directory for the notification icon.
Run the application on an emulator or a physical device. When you click the "Show Notification" button, it will display a notification with the specified title and content. 
Clicking on the notification will launch the SecondActivity

//Rating Bar
<RatingBar
    android:id="@+id/ratingBar"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:numStars="5"
    android:stepSize="1"
    android:rating="0"
    android:layout_marginTop="20dp"
    android:layout_centerHorizontal="true"/>
    
MainActivity.kt
val ratingBar = findViewById<RatingBar>(R.id.ratingBar)

ratingBar.setOnRatingBarChangeListener { ratingBar, rating, fromUser ->
    val intent = Intent(this, SecondActivity::class.java)
    intent.putExtra("rating", rating)
    startActivity(intent)
}

SecondActivity.kt
val intent = intent
if (intent != null && intent.hasExtra("rating")) {
    val rating = intent.getFloatExtra("rating", 0.0f)
    // Use the rating value to compute the overall rating
    // For example, display it in a TextView
    val textView = findViewById<TextView>(R.id.textView)
    textView.text = "Overall Rating: $rating"
}

